
#include <Arduino.h>
#include <MKRWAN.h>
LoRaModem modem;
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#include "devicesMints.h"
#include "SparkFun_AS7265X.h" //Click here to get the library: http://librarymanager/All#SparkFun_AS7265X
AS7265X as7265x;

// Uncomment if using the Murata chip as a module
// LoRaModem modem(Serial1);

#include "arduino_secrets.h"
// Please enter your sensitive data in the Secret tab or arduino_secrets.h
String appEui = SECRET_APP_EUI;
String appKey = SECRET_APP_KEY;

//  BME280 
#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme; // I2C
unsigned long delayTime;


bool SCD30Online;
SCD30 scd;
uint16_t SCD30ReadTime = 30;

// IPS7100 
bool IPS7100Online;
IpsSensor ips_sensor;
uint32_t IPS7100ResetTime = 30;
uint32_t IPS7100Period   ;

Adafruit_INA219 ina219Battery(0x40);
Adafruit_INA219 ina219Solar(0x41);

void join() {
  // Try to connect
  int connected = modem.joinOTAA(appEui, appKey);
  Serial.println("Trying to connect to the MINTS LoRaWAN Network.");    
  if (!connected) {
    Serial.println("Something went wrong, retrying...");
    join();
  }else{
    Serial.println("Connected to the MINTS LoRaWAN Network.");
  }
}

void setup() {


  Serial.begin(115200);
  Serial1.begin(9600);




  Serial.print("Hello Mints");
  delay(10);

  while (!Serial);
//  BME280 
    Serial.println(F("BME280 test"));

    unsigned status;
    
    // default settings
    status = bme.begin();  

    
    if (!status) {
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
        Serial.print("ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
        Serial.print("ID of 0x56-0x58 represents a BMP 280,\n");
        Serial.print("ID of 0x60 represents a BME 280.\n");
        Serial.print("ID of 0x61 represents a BME 680.\n");
        while (1) delay(10);
    }
    

    delayTime = 1000;
    Serial.println();

 if (scd.begin()) 
    {
    delay(10);
    scd.setMeasurementInterval(5);
    delay(1);
    SerialUSB.println("SCD30 Initiated");
    SCD30Online = true;
    }else{
      SerialUSB.println("SCD30 not found");
      delay(1);
    SCD30Online =  false;
    }


  if (as7265x.begin() == false)
  {
    Serial.println("Sensor does not appear to be connected. Please check wiring. Freezing...");
    while (1)
      ;
  }else{

    as7265x.enableBulb(AS7265x_LED_WHITE);
    as7265x.enableBulb(AS7265x_LED_IR);
    as7265x.enableBulb(AS7265x_LED_UV);
    as7265x.setIntegrationCycles(1);
    delay(2500);
    as7265x.disableBulb(AS7265x_LED_WHITE);
    as7265x.disableBulb(AS7265x_LED_IR);
    as7265x.disableBulb(AS7265x_LED_UV);
    delay(1000);
    as7265x.disableIndicator();
    delay(2500);
    Serial.println("AS7265x found");
  }

  if (! ina219Battery.begin()) {
    Serial.println("Failed to find INA219 chip");
    while (1) { delay(10); }
  }

  if (! ina219Solar.begin()) {
    Serial.println("Failed to find INA219 chip");
    while (1) { delay(10); }
  }


// IPS7100
  IPS7100Online =  initializeIPS7100Mints();
  IPS7100Period  = 10;
  SerialUSB.print("IPS Period: ");
  SerialUSB.println(IPS7100Period);

    // delay(10000);
    // if (!modem.begin(US915)) {
    //   Serial.println("Failed to start module");
    //   while (1) {}
    // };
    // Serial.print("Your module version is: ");
    // Serial.println(modem.version());
    // Serial.print("Your device EUI is: ");
    // Serial.println(modem.deviceEUI());
    // Serial.print("Your device App Key is: ");
    // Serial.println(appKey);  

//  Serial.println("--------------------------------");
//   Serial.println("Status  is: ");
//       Serial.println(modem.getLoRaWANStatus());
//   // Serial.println(modem.setPower(1,0));
//   // Serial.println(modem.modemGetMaxSize());
//   Serial.println("--------------------------------");
//   Serial.println("- MKR WAN 1310 Channel Masking -");
//   Serial.println("--------------------------------");

//   // Print default channels configuration
//   Serial.print("- Default mask: ");
//   Serial.println(modem.getChannelMask());

//   // Disable all channels
//   Serial.println("- Disabling all channels...");  
//   for (unsigned int i = 0; i < 72; i++) {
//     modem.disableChannel(i);
//   }
  
  // // Print current channels configuration
  // Serial.print("- Current mask: ");
  // Serial.println(modem.getChannelMask());
  
  // // Enable AU915-928 channels
  // // LoRaWAN® Regional Parameters and TTN specification: channels 8 to 15 plus 65 
  // Serial.println("- Enabling channels 56 to 63 plus 64...");  
  // for (unsigned int i = 56; i <= 63; i++) {
  //   modem.enableChannel(i);
  // }

  // modem.enableChannel(64);

  // Print current channels configuration
//   Serial.print("- Current mask: ");
//   Serial.println(modem.getChannelMask());
//   Serial.print("Obtaiting Status");

//   Serial.print(" Mask Generated: ");

// // 000000000000ff0000000000

//   delay(1000);

//   modem.sendMask("000000000000ff0000000000");
//   Serial.println(modem.getChannelMask());

  //  0 is the max AT+TXP
  // modem.setADR(true);  
  //  Adaptive data rates set

  // join();

  // delay(100000);
    
    // int connected = modem.joinOTAA(appEui, appKey);
    // if (!connected) {
    //   Serial.println("Something went wrong; are you indoor? Move near a window and retry");
    //   while (1) {}
    // }







}




void loop() {


  //   while (Serial1.available() == 0)
  // {
  //   Serial.println("Reading Rain Sensor");
  //   Serial.println(Serial1.readString());
  // }

    Serial.println(Serial1.readString());
    Serial.print("Temperature = ");
    Serial.print(bme.readTemperature());
    Serial.println(" °C");

    Serial.print("Pressure = ");
    Serial.print(bme.readPressure() / 100.0F);
    Serial.println(" hPa");

    Serial.print("Approx. Altitude = ");
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
    Serial.println(" m");

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
    delay(1000);

    Serial.print("CO2 = ");
    Serial.print( scd.getCO2());
    Serial.println(" °ppm");
    
    Serial.print("Temperature = ");
    Serial.print( scd.getTemperature());
    Serial.println(" °C");
    
    Serial.print("Humidity = ");
    Serial.print( scd.getHumidity());
    Serial.println(" %");
    
    delay(1000);
    Serial.println();
    ips_sensor.update();
    
    Serial.print("Particle Counts");
    Serial.println(ips_sensor.getPC01());
    Serial.println(ips_sensor.getPC03());
    Serial.println(ips_sensor.getPC05());  
    Serial.println(ips_sensor.getPC10());
    Serial.println(ips_sensor.getPC25());
    Serial.println(ips_sensor.getPC50());  
    Serial.println(ips_sensor.getPC100());
    
    Serial.println("Particle Concentrations");
    Serial.println(ips_sensor.getPM01());
    Serial.println(ips_sensor.getPM03());
    Serial.println(ips_sensor.getPM05());  
    Serial.println(ips_sensor.getPM10());
    Serial.println(ips_sensor.getPM25());
    Serial.println(ips_sensor.getPM50());  
    Serial.println(ips_sensor.getPM100());    
    
    Serial.println();
    delay(1000);

    Serial.print("Shunt Voltage Battery  = ");
    Serial.print(ina219Battery.getShuntVoltage_mV());
    Serial.println(" mV");

    Serial.print("Bus Voltage Battery  = ");
    Serial.print(ina219Battery.getBusVoltage_V());
    Serial.println(" V");

    Serial.print("Current Battery = ");
    Serial.print(ina219Battery.getCurrent_mA());
    Serial.println(" mA");

    Serial.print("Power Battery = ");
    Serial.print(ina219Battery.getPower_mW());
    Serial.println("   V");


    Serial.print("Shunt Voltage Solar = ");
    Serial.print(ina219Solar.getShuntVoltage_mV());
    Serial.println(" mV");

    Serial.print("Bus Voltage Solar = ");
    Serial.print(ina219Solar.getBusVoltage_V());
    Serial.println(" V");

    Serial.print("Current Solar = ");
    Serial.print(ina219Solar.getCurrent_mA());
    Serial.println(" mA");

    Serial.print("Power = ");
    Serial.print(ina219Solar.getPower_mW());
    Serial.println("   V");
    
    delay(1000);
    Serial.println("");
    
    as7265x.takeMeasurements(); //This is a hard wait while all 18 channels are measured

    Serial.print(as7265x.getCalibratedA()); //410nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedB()); //435nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedC()); //460nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedD()); //485nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedE()); //510nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedF()); //535nm
    Serial.print(",");

    Serial.print(as7265x.getCalibratedG()); //560nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedH()); //585nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedR()); //610nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedI()); //645nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedS()); //680nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedJ()); //705nm
    Serial.print(",");

    Serial.print(as7265x.getCalibratedT()); //730nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedU()); //760nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedV()); //810nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedW()); //860nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedK()); //900nm
    Serial.print(",");
    Serial.print(as7265x.getCalibratedL()); //940nm
    Serial.print(",");

    Serial.println();

}


  // change this to your regional band (eg. US915, AS923, ...)
  // if (!modem.begin(US915)) {
  //   Serial.println("Failed to start module");
  //   while (1) {}
  // };
  // Serial.print("Your module version is: ");
  // Serial.println(modem.version());
  // Serial.print("Your device EUI is: ");
  // Serial.println(modem.deviceEUI());

//   int connected = modem.joinOTAA(appEui, appKey);
//   if (!connected) {
//     Serial.println("Something went wrong; are you indoor? Move near a window and retry");
//     while (1) {}
//   }
 // Serial.println();
  // Serial.print("Sending: " + msg + " - ");
  // for (unsigned int i = 0; i < msg.length(); i++) {
  //   Serial.print(msg[i] >> 4, HEX);
  //   Serial.print(msg[i] & 0xF, HEX);
  //   Serial.print(" ");
  // }
  // Serial.println();

//   int err;
//   modem.beginPacket();
//   modem.print(msg);
//   err = modem.endPacket(true);
//   if (err > 0) {
//     Serial.println("Message sent correctly!");
//   } else {
//     Serial.println("Error sending message :(");
//     Serial.println("(you may send a limited amount of messages per minute, depending on the signal strength");
//     Serial.println("it may vary from 1 message every couple of seconds to 1 message every minute)");
//   }
//   delay(1000);
//   if (!modem.available()) {
//     Serial.println("No downlink message received at this time.");
//     return;
//   }
//   char rcv[64];
//   int i = 0;
//   while (modem.available()) {
//     rcv[i++] = (char)modem.read();
//   }
//   Serial.print("Received: ");
//   for (unsigned int j = 0; j < i; j++) {
//     Serial.print(rcv[j] >> 4, HEX);
//     Serial.print(rcv[j] & 0xF, HEX);
//     Serial.print(" ");
//   }
//   Serial.println();